// Examples for how to reason about source code

// Files and folders

directory "/".
directory "/etc", parent "/", name "etc".
directiry "/home", parent "/", name "home".
directiry "/home/user", parent "/home", name "user".
sourcefile "/home/user/file1.cpp", parent "/home/user", name "file1.cpp", basename "file1", extension "cpp".

// Types
namespace @global-namespace has name "".
class @c1, name "MyClass", parent @global-namespace.

builtin numeric type @int has name "int".
method @m1, class @c1, name "foo", return_type @int.
parameter @m1-0, position 0, method @m1, name "x", type @c1.
parameter @m1-1 has position 1, method @m1, name "y", type @string.

// a 5-ary predicate.
parameter @m2-2 has position 2, method @m1, name "z", type @float.

// Source code

expression statement @s1, parent @s2, position 0.

// This unpacks to:
@s1 is an expression.
@s1 is a statement.
@s1 has parent @m1.
@s1 has position 0.

block statement @s2, parent @m1.

// Special way to make an anonymous entity.
variable_access expression _, name "x", variable @m1-0, location @l0, parent @e1, position 0.

plus expression @e1, parent @s1.

expression e is arithmetic_expression if 
    plus e or
    minus e or
    times e or
    divide e.

// Source locations
location @l0, file "/home/calum/foo.c", start_line 0, end_line 0, start_column 1, end_column 10.

//class AnyStdStringType extends Type {
//  AnyStdStringType() {
//    exists(Namespace std |
//      std.getName() = "std" and
//      std.getADeclaration() = this
//    ) and
//    this.getName().matches("basic\\_string<%")
//  }
//}


if
    this is a Type and
    std is a Namespace and
    std has name "std" and
    std has a declaration this and
    this has name Name and
    "basic\\_string<%" has a match Name 
then
    this is an AnyStdStringType.

if
    f is a Function
    and
    f has global_name name
    and
    (name = "gmTime" or name = "localtime")
then
    potentiallyDangerousFunction f has
    message "Call to " + name + " is potentailly dangerous".

potentiallyDangerousFunction _ has message _, location _.
Function _.
FunctionCall _.

if
    potentiallyDangerousFunction f has message M, location L
then
    std:query "Potentially dangerous function" has
    item f,
    message M.

std:query
    "Potentially dangerous function" has
    item f,
    message M
if
    potentiallyDangerousFunction f has message M, location L.

if
    call is a FunctionCall and 
    target is a Function and
    call has Target target and
    potentiallyDangerousFunction target has message message
then
    std:query "Potentially dangerous function" has
    element call,
    message message.

std:query "Potentially dangerous function" has
    element call,
    message message
if
    call is a FunctionCall and 
    target is a Function and
    call has Target target and
    potentiallyDangerousFunction target has message message.


std:query "Potentially dangerous function", message m if
    potentiallyDangerousFunction m.
