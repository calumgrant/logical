
[experimental] predicate "My Predicate" x+y has bar fu 2+2.

[experimental] bar 1.
[experimental] bar @1.
[experimental] bar true.
[experimental] bar false.
[experimental] fu bar 1.
[experimental] fu bar x.
[experimental] fu(1,2,3).
[experimental] fu y if y = find count x in (fu x).
[experimental] fu, bar b, baz z.
[experimental] fu has no bar.
[experimental] fu reaches bar b.
[experimental] fu has bar _ with bar _.
[experimental] fu has child _ with child _ with child _.
[experimental] fu has a child with a child with a child _.
[experimental] fu has a child with a child with a child.

// Testing experimental_statement:
[experimental] f 1.
[experimental] if f 1 then f 2.
[experimental] 2 is even if 1 is odd.
[experimental] f().
[experimental] f(1) :- f(2).

// Testing experimental_entity_base:
[experimental] f g 1.
[experimental] f g h 1.
[experimental] f g h (1).
[experimental] f g "h" 1.
[experimental] "f" 1.
[experimental] "f" 1.
[experimental] f g (1+2).

// experimental_entity_clause:
[experimental] f has a g.
[experimental] f has a g _.
[experimental] foo _ has a g _.
[experimental] foo _ reaches a g _.
[experimental] _ reaches a g _.
[experimental] 1+2 reaches a g _.
[experimental] foo (1+2) reaches a g _.
[experimental] foo _ reaches a g _ with child.
[experimental] foo _ reaches a g _ with large child.
[experimental] foo _ reaches a g _ with large child _.
[experimental] foo _ reaches a large bear _ with large child _.
[experimental] foo _ has a g _ with child.
[experimental] foo _ has a g _ with large child.
[experimental] foo _ has g _ with large child _.
[experimental] foo _, large bear _ with large child _.

// experimental_with_attribute:
[experimental] _ has parent with no parent.
[experimental] _ has parent p with no parent.
[experimental] node _ has parent with no "parent".
[experimental] node has parent with a parent.
[experimental] node has parent with a large parent p.

// experimental_attributes
[experimental] a has bagder, fox, name, age a, length 12.
[experimental] a, bagder, fox, name, age a, length 12.
[experimental] small porcupine p, bagder, fox, name, age a, length 12.
[experimental] small porcupine p has a bagder, a fox, a name, an age a, length 12.

// nonary predicates:
[experimental] f.
[experimental] f if g and h.
[experimental] f if g and h().



// Expressions
[experimental] f 1+2 if x=1+2.
[experimental] f (1+2) if x=(1+p).
[experimental] n is small in-range if 1<=n<=10.

// Datalog syntax

[experimental] f().
[experimental] f(x).
[experimental] f(x,y).
[experimental] f(x) :- g(x).
[experimental] f(x,y) :- g(y,x).
[experimental] f(x,y) :- not g().
[experimental] f(x,y) :- g(), h().
[experimental] f(x,y) :- g(); h().
[experimental] f(x,y) :- (g(); h()), i(x,y).
[experimental] f(x,y) :- (g(); h(); x=a+b), i(x,y); x=1+2.

// Datalog aggregates & quantifiers

// Error recovery
//[experimental] 1 1 1 1.
//[experimental] 1 1.




