
[experimental] predicate "My Predicate" x+y has bar fu 2+2.

[experimental] bar 1.
[experimental] bar @1.
[experimental] bar true.
[experimental] bar false.
[experimental] fu bar 1.
[experimental] fu bar x.
[experimental] fu(1,2,3).
[experimental] fu y if y = find count x in (fu x).
[experimental] fu, bar b, baz z.
[experimental] fu has no bar.
[experimental] fu reaches bar b.
[experimental] fu has bar _ with bar _.
[experimental] fu has child _ with child _ with child _.
[experimental] fu has a child with a child with a child _.
[experimental] fu has a child with a child with a child.

// Testing experimental_statement:
[experimental] f 1.
[experimental] if f 1 then f 2.
[experimental] 2 is even if 1 is odd.
[experimental] f().
[experimental] f(1) :- f(2).

// Testing experimental_entity_base:
[experimental] f g 1.
[experimental] f g h 1.
[experimental] f g h (1).
[experimental] f g "h" 1.
[experimental] "f" 1.
[experimental] "f" 1.
[experimental] f g (1+2).

// experimental_entity_clause:
[experimental] f has a g.
[experimental] f has a g _.
[experimental] foo _ has a g _.
[experimental] foo _ reaches a g _.
[experimental] _ reaches a g _.
[experimental] 1+2 reaches a g _.
[experimental] foo (1+2) reaches a g _.
[experimental] foo _ reaches a g _ with child.
[experimental] foo _ reaches a g _ with large child.
[experimental] foo _ reaches a g _ with large child _.
[experimental] foo _ reaches a large bear _ with large child _.
[experimental] foo _ has a g _ with child.
[experimental] foo _ has a g _ with large child.
[experimental] foo _ has g _ with large child _.
[experimental] foo _, large bear _ with large child _.

// experimental_with_attribute:
[experimental] _ has parent with no parent.
[experimental] _ has parent p with no parent.
[experimental] node _ has parent with no "parent".
[experimental] node has parent with a parent.
[experimental] node has parent with a large parent p.
[experimental] node has parent with large parent p-2.
[experimental] node has parent with an parent (p-2).

// experimental_attributes
[experimental] a has bagder, fox, name, age a, length 12.
[experimental] a, bagder, fox, name, age a, length 12.
[experimental] small porcupine p, bagder, fox, name, age a, length 12.
[experimental] small porcupine p has a bagder, a fox, a name, an age a, length 12.
[experimental] p has a bagder, a fox, a name _, an age (y-(12+_)), length y+12.
[experimental] _ has a "Fish called" "Wanda".
[experimental] _ has "Fish called" "Wanda".

// experimental_base_clause
[experimental] (A and B).
[experimental] f if g and (h or i).
[experimental] [inline] f if g and ([bindlast, noinline] h or i).
[experimental] f if g and not h.
[experimental] f if 1<2 and 1>2 and enable-feature-flag.
[experimental] f() if enable-feature-flag("optimize").
[experimental] x is f if 1+2 < x < 2+3.
[experimental] x is f if 1+2 < (x) <= 100.
[experimental] condition if all (x=2) in (x=1).

// experimental_datalog_clause:
[experimental] f() :- g().
[experimental] f() :- (g()).
[experimental] f() :- not g().
[experimental] f() :- g(x), (1+2) <= (x-2) <= (20+5).
[experimental] f() :- g(x), 1+2 <= x-2 <= 20+5.
[experimental] f() :- g(x), (1+2) = (x-2).
[experimental] f() :- f(x,y,z).
[experimental] f(x,y) :- g(x,y); h(x,y).
[experimental] f(x,y) :- all(x=1; x=1).

// experimental_entity_expression:
[experimental] f x.
[experimental] f "".
[experimental] f @123.
[experimental] f 123.
[experimental] f 123.456.
[experimental] f 123.456e+12.
[experimental] f a if g a.
[experimental] f a if g _ and a=12.
[experimental] f no if g _ and no=12.
[experimental] f an if g _ and an=12.
[experimental] f if f (12).
[experimental] f if f (1+2).
[experimental] f if f (a+b/2*3).
[experimental] f if x = a+b/(2*3).
[experimental] f if x = -y.
[experimental] f find count x in (x=2 or x=3).
[experimental] f find count x+1,y in (x=2 or x=3).
[experimental] f find count (x+1), -2 in (x=2 or x=3).
[experimental] f find count(x,y,z; g(x,y,z)).
[experimental] f find count(x; g(x,y,z)).

// nonary predicates:
[experimental] f.
[experimental] f if g and h.
[experimental] f if g and h().

// Expressions
[experimental] f 1+2 if x=1+2.
[experimental] f (1+2) if x=(1+p).
[experimental] n is small in-range if 1<=n<=10.

// Datalog syntax

[experimental] f().
[experimental] f(x).
[experimental] f(x,y).
[experimental] f(x) :- g(x).
[experimental] f(x,y) :- g(y,x).
[experimental] f(x,y) :- not g().
[experimental] f(x,y) :- g(), h().
[experimental] f(x,y) :- g(); h().
[experimental] f(x,y) :- (g(); h()), i(x,y).
[experimental] f(x,y) :- (g(); h(); x=a+b), i(x,y); x=1+2.

// Error recovery
//[experimental] 1 1 1 1.
//[experimental] 1 1.




