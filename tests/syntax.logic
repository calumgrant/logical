// A tour of Logical syntax.

// These are facts - unary relations
person "Fred".
person @.
person 123.
person @123.
person @person-123.
person 3.14.
person true.
person false.

// You can define global constants as follows.
pi 3.14159.
pi is 3.14159.
googol 1.0e100.
googol 1e100.
username "calum".

// Binary relations are defined using `has` and `,`.

// These are equivalent. They define a unary relation `circle` and the binary `radius`
circle @c1, radius 10.
circle @c2 has radius 20.

// These are equivalent. `a` and `an` are optional and can be used to aid readability.
@fred has first-name "Fred".
@fred has a first-name "Fred".
@fred has an first-name "Fred".
@fred, first-name "Fred".
@fred has first-name "Fred", surname "Brooks", age 99.

// Rules
circle C has diameter D if C has radius R and D = R*3.14159.
circle C has diameter D if C has radius R and pi Pi and D = R*Pi.
circle C has diameter D if C has radius R and Pi is pi and D = R*Pi.

X has ancestor Y if 
    X has parent Y or 
    X has parent Z and Z has ancestor Y.

X has parent Y if X has mother Y or X has father Y.

P is retired if P has age A and A>=65.

P is retired if
    P has age A and (P is male and A>=65 or P is female and A>=60).

P is retired if 
    P has age A and (P is male and A>=65 or not male P and A>=60).

P is retired if 
    P has age A and (P is male and A>=65 or P is not male and A>=60).

P is retired if 
    P has age A and (P is male and A>=65 or P is not a male and A>=60).

// This defines the relation `retired`, not the relation `person`.
person P is retired if 
    P has age A and (P is male and A>=65 or P is female and A>=60).

person X is old if X has age A and A>=80.
person X is young if not X is old.

// Queries

find person P.
find person.
find circle C, radius R.
find C has radius R.
find C has radius R, diameter D.
find C has radius R, diameter D if D>10.
find circle C and person P.
find circle C and person P if 
    P has age A and C has diameter A.
find circle C and person P, surname S if 
    P has age A and C has diameter A.

// Query using a variable list
find P if person P.
find P, S if person P, surname S.

// Quantifiers

person X has money M if M = sum V in (X has cash C and C has value V).
person X has money sum V in (X has cash C and C has amount V).
person X has coins count C in (X has cash C).
person X is rich if sum V in (X has cash C and C has value V) > 100.

person X is rich if 
    all (rich X) in X has parent P and rich P.

// New idea:
// This states two facts: rich P and person P.
rich person @p1.

// TODO:
// person X and rich X if foo X.

// rich person @p2 has name "Frank".
person P is orphan if not P has parent. 

// Datalog syntax:

f().
f() :- g().
f() :- g(), h().
f(x) :- g(x), h(x).
f(x) :- g(x), h(_).
f() :- g(); h(); i().
f() :- not g().
f() :- (g()).
f() :- (g();h()), i().

// Datalog query:

?- f(X).

// `print` is a predicate with a side-effect.
print "Syntax test passed".
